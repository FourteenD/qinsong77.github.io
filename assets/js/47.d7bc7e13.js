(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{555:function(v,_,t){"use strict";t.r(_);var e=t(25),o=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h3",{attrs:{id:"阻塞、非阻塞和同步、异步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻塞、非阻塞和同步、异步"}},[v._v("#")]),v._v(" 阻塞、非阻塞和同步、异步")]),v._v(" "),t("p",[v._v("阻塞和非阻塞 I/O 其实是针对操作系统内核而言的，而不是 nodejs 本身。阻塞 I/O 的特点就是"),t("strong",[v._v("一定要等到操作系统完成所有操作后才表示调用结束")]),v._v("，而非阻塞 I/O 是调用后立马返回，不用等操作系统内核完成操作。")]),v._v(" "),t("p",[v._v("nodejs中的异步 I/O 采用"),t("strong",[v._v("多线程")]),v._v("的方式，由 "),t("code",[v._v("EventLoop")]),v._v("、"),t("code",[v._v("I/O 观察者")]),v._v("，"),t("code",[v._v("请求对象")]),v._v("、"),t("code",[v._v("线程池")]),v._v("四大要素相互配合，共同实现。")]),v._v(" "),t("h3",{attrs:{id:"js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[v._v("#")]),v._v(" Js")]),v._v(" "),t("p",[v._v("JS属于解释型语言，对于解释型的语言说，解释器会对源代码做如下分析:")]),v._v(" "),t("ol",[t("li",[v._v("通过词法分析和语法分析生成 AST(抽象语法树)，接下来会生成执行上下文")]),v._v(" "),t("li",[v._v("将 AST 转换为字节码（字节码是介于"),t("code",[v._v("AST")]),v._v(" 和 "),t("code",[v._v("机器码")]),v._v("之间的一种代码，但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码然后执行。）")]),v._v(" "),t("li",[v._v("由解释器逐行执行字节码，遇到热点代码启动编译器进行编译，生成对应的机器码, 以优化执行效率。")])]),v._v(" "),t("p",[v._v("如果把AST直接转成机器码给V8执行，也可以，但转成的机器码的体积太大，引发了严重的内存占用问题。")]),v._v(" "),t("p",[v._v("所以"),t("code",[v._v("解释器")]),v._v("是将字节码转成机器码。")]),v._v(" "),t("p",[v._v("在执行字节码的过程中，如果发现某一部分代码重复出现，那么 V8 将它记做"),t("code",[v._v("热点代码")]),v._v("(HotSpot)，然后将这段代码"),t("code",[v._v("编译")]),v._v("成"),t("code",[v._v("机器码")]),v._v("保存起来，这个用来编译的工具就是V8的"),t("code",[v._v("编译器")]),v._v("(也叫做TurboFan) , 因此在这样的机制下，代码执行的时间越久，那么执行效率会越来越高，因为有越来越多的字节码被标记为热点代码，遇到它们时直接执行相应的机器码，不用再次将转换为机器码。")]),v._v(" "),t("p",[v._v("编译器和解释器的 根本区别在于前者会编译生成二进制文件但后者不会。")]),v._v(" "),t("p",[v._v("并且，这种字节码跟编译器和解释器结合的技术，称之为即时编译(JIT)。")])])}),[],!1,null,null,null);_.default=o.exports}}]);