(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{528:function(t,e,r){"use strict";r.r(e);var s=r(25),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h3",{attrs:{id:"spa-路由"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spa-路由"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://juejin.im/post/6895882310458343431",target:"_blank",rel:"noopener noreferrer"}},[t._v("SPA 路由"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"axios"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#axios"}},[t._v("#")]),t._v(" Axios")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.im/post/6885471967714115597",target:"_blank",rel:"noopener noreferrer"}},[t._v("值得借鉴的地方"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"better-scroll"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#better-scroll"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://juejin.im/post/6876943860988772360",target:"_blank",rel:"noopener noreferrer"}},[t._v("Better Scroll"),r("OutboundLink")],1)]),t._v(" "),r("h4",{attrs:{id:"git-rebase"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://www.jianshu.com/p/6960811ac89c",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-rebase"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("git merge 操作合并分支会让两个分支的每一次提交都按照提交时间（并不是push时间）排序，并且会将两个分支的最新一次commit点进行合并成一个新的commit，最终的分支树呈现非整条线性直线的形式")]),t._v(" "),r("p",[t._v("git rebase操作实际上是将当前执行rebase分支的所有基于原分支提交点之后的commit打散成一个一个的patch，并重新生成一个新的commit hash值，再次基于原分支目前最新的commit点上进行提交，并不根据两个分支上实际的每次提交的时间点排序，rebase完成后，切到基分支进行合并另一个分支时也不会生成一个新的commit点，可以保持整个分支树的完美线性")]),t._v(" "),r("p",[t._v("rebase的最大好处并不是消除merge，而是避免merge的交织。")]),t._v(" "),r("p",[t._v("简要来说，就是在merge进被合分支（如master）之前，最好将自己的分支给rebase到最新的被合分支（如master）上，然后用pull request创建merge请求。")]),t._v(" "),r("h3",{attrs:{id:"eslint-和-prettier"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eslint-和-prettier"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/80574300",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint 和 Prettier"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("ESLint 主要解决了两类问题,")]),t._v(" "),r("ol",[r("li",[t._v("代码质量问题：使用方式有可能有问题(problematic patterns)")]),t._v(" "),r("li",[t._v("代码风格问题：风格不符合一定规则 (doesn’t adhere to certain style guidelines)")])]),t._v(" "),r("p",[t._v("但其实 ESLint 主要解决的是代码质量问题。另外一类代码风格问题其实 "),r("code",[t._v("Airbnb JavaScript Style Guide")]),t._v(" 并没有完完全全做完。\n"),r("code",[t._v("Prettier")]),t._v(" 接管了两个问题其中的代码格式的问题，而使用 "),r("code",[t._v("Prettier + ESLint")]),t._v(" 就完完全全解决了两个问题。")]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("husky: 一个让配置 "),r("code",[t._v("git hooks")]),t._v("(为了防止一些不规范的代码"),r("code",[t._v("commit")]),t._v(" 并"),r("code",[t._v("push")]),t._v("到远端，可以在git命令执行前用一些钩子来检测并阻止。)变得更简单的工具；\n原理：husky会根据 package.json里的配置，在.git/hooks目录生成所有的 hook 脚本（如果你已经自定义了一个hook脚本，husky不会覆盖它）")])]),t._v(" "),r("p",[r("code",[t._v(".huskyrc")])]),t._v(" "),r("div",{staticClass:"language-config line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('{\n  "hooks": {\n    "pre-commit": "lint-staged"\n  }\n}\n')])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("ol",{attrs:{start:"4"}},[r("li",[t._v("lint-staged: lint-staged 针对暂存的 git 文件运行 linters，不要让不符合规则的代码溜进代码库。lint-staged总是将 所有暂存文件的列表传递给任务，忽略任何文件都应该在任务本身中配置，\n比如："),r("code",[t._v(".prettierignore")]),t._v(" / "),r("code",[t._v(".eslintignore")]),t._v(" 。lint-stage 总是配合 husky一起使用。")])]),t._v(" "),r("p",[r("code",[t._v(".lintstagedrc")])]),t._v(" "),r("div",{staticClass:"language-cofgig line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('{\n  "src/**/*.js": [\n    "eslint --fix",\n    "prettier --write",\n    "git add"\n  ]\n}\n')])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br")])]),r("h4",{attrs:{id:"git-reset-三种模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-三种模式"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://www.jianshu.com/p/c2ec5f06cf1a",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Reset 三种模式"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"彻底理解服务端渲染-ssr原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#彻底理解服务端渲染-ssr原理"}},[t._v("#")]),t._v(" "),r("a",{attrs:{href:"https://github.com/yacan8/blog/issues/30",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底理解服务端渲染 - SSR原理"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);