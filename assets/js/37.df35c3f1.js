(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{503:function(e,t,r){e.exports=r.p+"assets/img/immutable.c7634196.gif"},589:function(e,t,r){"use strict";r.r(t);var a=r(25),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[e._v("#")]),e._v(" redux")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844904036013965325",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码解析1"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6937491452838559781",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码解析2"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"immutable-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immutable-js"}},[e._v("#")]),e._v(" immutable.js")]),e._v(" "),a("p",[a("strong",[e._v("持久化数据结构")]),e._v("和"),a("strong",[e._v("结构共享")])]),e._v(" "),a("p",[a("code",[e._v("Immutable Data")]),e._v("是一种利用结构共享形成的持久化数据结构，一旦有部分被修改，那么将会返回一个全新的对象，并且原来相同的节点会直接共享。")]),e._v(" "),a("p",[e._v("每次修改一个 immutable 对象时都会创建一个新的不可变的对象，在新对象上操作并 不会影响到原对象的数据。")]),e._v(" "),a("p",[e._v("具体点来说，「immutable」 对象数据内部采用是多叉树的结构，凡是有节点被改变，那么它和与它相关的所有"),a("strong",[e._v("上级节点都更新")]),e._v("。")]),e._v(" "),a("p",[a("img",{attrs:{src:r(503),alt:""}})]),e._v(" "),a("ul",[a("li",[e._v("Javascript引用类型复用，不正确的操作导致复用前的数据也改变")]),e._v(" "),a("li",[e._v("使用深拷贝，有各种问题，比如性能，循环引用的处理，"),a("code",[e._v("key")]),e._v(" 里面 "),a("code",[e._v("getter")]),e._v("，"),a("code",[e._v("setter")]),e._v(" 以及原型链上的内容如何处理，React使用时导致的不必要的重复渲染")]),e._v(" "),a("li",[e._v("immutable: 创建一个被 deepClone 过的数据，新的数据进行有副作用 (side effect) 的操作都不会影响到之前的数据。其实就是创建全选的父引用，复用之前的引用类型，当对应的引用类型\n的数据改变是，才创建新的复制。")])]),e._v(" "),a("p",[e._v("即2个特点：")]),e._v(" "),a("ol",[a("li",[e._v("将所有的原生数据类型（Object， Array等）都会转化成 "),a("code",[e._v("immutable-js")]),e._v(" 的内部对象（"),a("code",[e._v("Map")]),e._v("，"),a("code",[e._v("List")]),e._v(" 等），并且任何操作最终都会返回一个"),a("strong",[e._v("新的")]),e._v(" "),a("code",[e._v("immutable")]),e._v(" 的值。")]),e._v(" "),a("li",[e._v("在 "),a("code",[e._v("immutable-js")]),e._v(" 的数据结构中，深层次的对象 在没有修改的情况下仍然能够保证严格相等，即"),a("strong",[e._v("深层嵌套对象的结构共享")])])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44571842",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码解析"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"react-css-方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-css-方案"}},[e._v("#")]),e._v(" React Css 方案")]),e._v(" "),a("ol",[a("li",[e._v("css modules")])]),e._v(" "),a("p",[e._v("类似Vue的"),a("code",[e._v("scoped")]),e._v("，可以解决CSS变量名冲突")]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("css in js")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/styled-components/styled-components",target:"_blank",rel:"noopener noreferrer"}},[e._v("styled-components"),a("OutboundLink")],1)]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("a",{attrs:{href:"https://github.com/vercel/styled-jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("styled-jsx"),a("OutboundLink")],1)])]),e._v(" "),a("h4",{attrs:{id:"react如何实现keep-alive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react如何实现keep-alive"}},[e._v("#")]),e._v(" react如何实现keep-alive")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844903942522929160",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 中的状态自动保存"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);