(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{379:function(e,t,r){e.exports=r.p+"assets/img/content_box.257b7ba1.png"},380:function(e,t,r){e.exports=r.p+"assets/img/box-sizing.47c5dd3e.png"},381:function(e,t,r){e.exports=r.p+"assets/img/inherit.8fdbc6c3.png"},382:function(e,t,r){e.exports=r.p+"assets/img/getBoundingClient.909635c6.png"},383:function(e,t,r){e.exports=r.p+"assets/img/ele_center.4177ce02.png"},476:function(e,t,r){"use strict";r.r(t);var i=r(25),_=Object(i.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("h3",{attrs:{id:"css晦涩难懂的点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#css晦涩难懂的点"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://juejin.cn/post/6888102016007176200",target:"_blank",rel:"noopener noreferrer"}},[e._v("css晦涩难懂的点"),i("OutboundLink")],1)]),e._v(" "),i("h3",{attrs:{id:"web开发者应该掌握的css-tricks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#web开发者应该掌握的css-tricks"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://lhammer.cn/You-need-to-know-css/#/zh-cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web开发者应该掌握的CSS tricks"),i("OutboundLink")],1)]),e._v(" "),i("h3",{attrs:{id:"各种页面常见布局知名网站实例分析相关阅读推荐"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#各种页面常见布局知名网站实例分析相关阅读推荐"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://www.sweet-kk.top/css-layout",target:"_blank",rel:"noopener noreferrer"}},[e._v("各种页面常见布局知名网站实例分析相关阅读推荐"),i("OutboundLink")],1)]),e._v(" "),i("h3",{attrs:{id:"网页布局"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#网页布局"}},[e._v("#")]),e._v(" 网页布局")]),e._v(" "),i("blockquote",[i("p",[i("a",{attrs:{href:"https://www.zhihu.com/question/21775016/answer/1358336033",target:"_blank",rel:"noopener noreferrer"}},[e._v("总结"),i("OutboundLink")],1)])]),e._v(" "),i("h3",{attrs:{id:"前端demo以及基础的效果-css3简单的动画特效"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#前端demo以及基础的效果-css3简单的动画特效"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"http://codehtml.cn/front-end-demo/#/",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端DEMO以及基础的效果，CSS3简单的动画特效"),i("OutboundLink")],1)]),e._v(" "),i("h3",{attrs:{id:"你未必知道的49个css知识点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#你未必知道的49个css知识点"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://juejin.im/post/6844903902123393032",target:"_blank",rel:"noopener noreferrer"}},[e._v("你未必知道的49个CSS知识点"),i("OutboundLink")],1)]),e._v(" "),i("h4",{attrs:{id:"从网易与淘宝的font-size思考前端设计稿与工作流"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#从网易与淘宝的font-size思考前端设计稿与工作流"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://www.cnblogs.com/lyzg/p/4877277.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("从网易与淘宝的font-size思考前端设计稿与工作流"),i("OutboundLink")],1)]),e._v(" "),i("h3",{attrs:{id:"自适应布局和响应式布局"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#自适应布局和响应式布局"}},[e._v("#")]),e._v(" 自适应布局和响应式布局")]),e._v(" "),i("p",[e._v("响应式布局实现一个网站能够兼容多个终端，网页的布局针对屏幕大小的尺寸而进行响应，流式布局+弹性布局，再搭配媒体查询技术使用。")]),e._v(" "),i("p",[e._v("自适应布局大致是指网页能够在不同大小的终端设备上自行适应显示。就是让一个网站在不同大小的设备上呈现显示同一样的页面，让同一个页面适应不同大小屏幕，根据屏幕的大小，自动缩放。多用rem+js实现，在移动端适配多种屏幕。")]),e._v(" "),i("h3",{attrs:{id:"em-rem"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#em-rem"}},[e._v("#")]),e._v(" em&&"),i("a",{attrs:{href:"https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rem"),i("OutboundLink")],1)]),e._v(" "),i("p",[e._v("px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。")]),e._v(" "),i("h4",{attrs:{id:"em"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#em"}},[e._v("#")]),e._v(" em")]),e._v(" "),i("p",[i("strong",[e._v("em")]),e._v("，"),i("code",[e._v("em")]),e._v("值的大小是动态的。当定义或继承"),i("code",[e._v("font-size")]),e._v("属性时，"),i("code",[e._v("1em")]),e._v("等于该元素的字体大小。如果你在网页中任何地方都没有设置文字大小的话，那它将等于浏览器默认文字大小，通常是"),i("code",[e._v("16px")]),e._v("。所以通常1em = 16px。2em = 32px。 如果你设置了body元素的字体大小为20px，那1em = 20px、2em = 40px。那个2就是当前em大小的倍数。")]),e._v(" "),i("p",[i("code",[e._v("em")]),e._v("单位受父元素的影响，是因为font-size本身是继承属性。如果没有定义，就要基于父元素，直到html,html未设置则是浏览器的默认文字大小"),i("code",[e._v("16px")])]),e._v(" "),i("p",[e._v("所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。")]),e._v(" "),i("h4",{attrs:{id:"rem"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#rem"}},[e._v("#")]),e._v(" rem")]),e._v(" "),i("p",[i("code",[e._v("rem")]),e._v("即 root em，顾名思义，就是根元素 "),i("code",[e._v("em")]),e._v(" 大小。 "),i("code",[e._v("em")]),e._v(" 相对于当前元素， "),i("code",[e._v("rem")]),e._v(" 相对于根元素，本质差别在于当前元素是多变的，根元素是固定的，也就是说，如果使用 rem，我们的计算值不会受当前元素 "),i("code",[e._v("font-size")]),e._v(" 大小的影响。css3新增。")]),e._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"#%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0"}},[e._v("伪类和伪元素")])]),e._v(" "),i("li",[i("a",{attrs:{href:"#img-%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%83%E7%B4%A0"}},[e._v("img是什么元素")])]),e._v(" "),i("li",[i("a",{attrs:{href:"#line-height-1-5%E5%92%8Cline-height-150-%E7%9A%84%E5%8C%BA%E5%88%AB"}},[e._v("line-height:1.5和line-height:150%的区别")])]),e._v(" "),i("li",[i("a",{attrs:{href:"#%E5%85%83%E7%B4%A0%E5%B1%85%E4%B8%AD"}},[e._v("元素居中")])])]),e._v(" "),i("h3",{attrs:{id:"盒模型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#盒模型"}},[e._v("#")]),e._v(" 盒模型")]),e._v(" "),i("p",[e._v("组成：盒模型由内容区域、内边距、边框、外边距四部分组成。")]),e._v(" "),i("p",[e._v("实际大小：盒模型实际大小由内容区域、内边距、边框三部分组成，css设置"),i("code",[e._v("width")]),e._v("和"),i("code",[e._v("height")]),e._v("是对盒子内容区域设置的。")]),e._v(" "),i("p",[i("code",[e._v("box-sizing")]),e._v("属性：")]),e._v(" "),i("ul",[i("li",[e._v("W3C标准盒模型（content-box）: 一个块的总宽度= width + margin(左右) + padding(左右) + border(左右);")]),e._v(" "),i("li",[e._v("IE（怪异）盒模型（border-box：border、padding 的设置不会影响元素的宽高，那么css给盒子设置的"),i("code",[e._v("width")]),e._v("和"),i("code",[e._v("height")]),e._v("属性就等于盒模型的实际大小（包括内容区域、内边距、边框）;\n"),i("img",{attrs:{src:r(379),alt:""}}),e._v(" "),i("img",{attrs:{src:r(380),alt:""}})])]),e._v(" "),i("p",[i("code",[e._v("border-color")]),e._v(" 默认颜色就是\ncolor 色值”。具体来讲，就是当没有指定"),i("code",[e._v("border-color")]),e._v("颜色值的时候，会使用当前元素的\ncolor 计算值作为边框色。具有类似特性的 CSS 属性还有 outline、box-shadow 和 text-shadow 等。")]),e._v(" "),i("p",[i("img",{attrs:{src:r(381),alt:""}})]),e._v(" "),i("h3",{attrs:{id:"定位position"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#定位position"}},[e._v("#")]),e._v(" 定位position")]),e._v(" "),i("ul",[i("li",[i("p",[i("code",[e._v("static")]),e._v("\nHTML 元素的默认值，即没有定位，遵循正常的文档流对象。静态定位的元素不会受到 top, bottom, left, right影响。")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("relative")]),e._v("\n相对定位元素的定位是相对其正常位置。移动相对定位元素，但它原本所占的空间不会改变。相对定位元素经常被用来作为绝对定位元素的容器块。")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("absolute")]),e._v("\n绝对定位的元素的位置相对于最近的已定位父元素（除了static的父元素），如果元素没有已定位的父元素，那么它的位置相对于"),i("code",[e._v("<html>")]),e._v("--"),i("strong",[e._v("错误，经过测试是相对于浏览器窗口")]),e._v(":\ntop, bottom, left, right百分比写法是"),i("strong",[e._v("相对于父元素box的大小")]),e._v(";\nabsolute 定位使元素的位置与文档流无关，因此不占据空间。absolute 定位的元素和其他元素重叠。")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("fixed")]),e._v("\n元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动：fixed定位使元素的位置与文档流无关，因此不占据空间。\n"),i("code",[e._v("fixed")]),e._v("定位的元素和其他元素重叠。")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("sticky")]),e._v("\n粘性定位：position: sticky; 在目标区域以内，它的行为就像 "),i("code",[e._v("position:relative;")]),e._v("在滑动过程中，某个元素距离其父元素的距离达到"),i("code",[e._v("sticky")]),e._v("粘性定位的要求时(比如"),i("code",[e._v("top：100px")]),e._v(")；"),i("code",[e._v("position:sticky")]),e._v("这时的效果相当于"),i("code",[e._v("fixe")]),e._v("d定位，固定到适当位置；")])])]),e._v(" "),i("p",[e._v("元素定位表现为在跨越特定阈值（相对偏移）前为相对定位，之后为固定定位。")]),e._v(" "),i("p",[e._v("元素固定的相对偏移是相对于离它最近的具有滚动框的祖先元素，如果祖先元素都不可以滚动，那么是相对于viewport来计算元素的偏移量。")]),e._v(" "),i("p",[e._v("这个特定阈值（相对偏移）指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。")]),e._v(" "),i("p",[e._v("使用条件：")]),e._v(" "),i("p",[e._v("1、父元素不能"),i("code",[e._v("overflow:hidden")]),e._v("或者"),i("code",[e._v("overflow:auto")]),e._v("属性；")]),e._v(" "),i("p",[e._v("2、必须指定"),i("code",[e._v("top、bottom、left、right")]),e._v("4个值之一，否则只会处于相对定位；")]),e._v(" "),i("p",[e._v("3.父元素的高度不能低于"),i("code",[e._v("sticky")]),e._v("元素的高度；")]),e._v(" "),i("p",[e._v("4、sticky元素仅在其父元素内生效。")]),e._v(" "),i("ul",[i("li",[e._v("inherit\n规定应该从父元素继承 position 属性的值。")])]),e._v(" "),i("h4",{attrs:{id:"伪类和伪元素"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#伪类和伪元素"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes",target:"_blank",rel:"noopener noreferrer"}},[e._v("伪类"),i("OutboundLink")],1),e._v("和伪元素")]),e._v(" "),i("p",[e._v("伪类和伪元素的根本区别在于：它们是否创造了新的元素")]),e._v(" "),i("p",[e._v("伪类，指可以通过元素选择器，就可以实现的效果，如"),i("code",[e._v("first-child")]),e._v("，"),i("code",[e._v("active")]),e._v(", "),i("code",[e._v(":checked")]),e._v("，"),i("code",[e._v(":disabled")]),e._v("， "),i("code",[e._v(":nth-child()")]),e._v("等。 而伪元素，是指需要通过创元素，才可以实现的效果，如"),i("code",[e._v("first-letter")]),e._v(","),i("code",[e._v("before")]),e._v("，"),i("code",[e._v("after")]),e._v("等。\n具体元素跟写法，可参考："),i("a",{attrs:{href:"https://blog.csdn.net/qq_27674439/article/details/90608220",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/qq_27674439/article/details/90608220"),i("OutboundLink")],1)]),e._v(" "),i("h4",{attrs:{id:"img-是什么元素"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#img-是什么元素"}},[e._v("#")]),e._v(" "),i("code",[e._v("<img>")]),e._v("是什么元素")]),e._v(" "),i("blockquote",[i("p",[i("code",[e._v("<img />")]),e._v(" 标签没有独占一行，所以是行内元素;既然是行内元素为什么能够设置宽高呢？"),i("code",[e._v("<img />")]),e._v(" 标签属于替换元素，具有内置的宽高属性，所以可以设置，具体解释看下面。")])]),e._v(" "),i("p",[e._v("从元素本身的特点来讲，可以分为不可替换元素和替换元素,元素相关的"),i("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN解释"),i("OutboundLink")],1)]),e._v(" "),i("h5",{attrs:{id:"不可替换元素"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#不可替换元素"}},[e._v("#")]),e._v(" 不可替换元素")]),e._v(" "),i("ul",[i("li",[e._v("(X)HTML 的大多数元素是不可替换元素，即其内容直接表现给用户端(例如浏览器),如："),i("code",[e._v("<h1>我是标题</h1>")]),e._v("。")])]),e._v(" "),i("h5",{attrs:{id:"可替换元素"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#可替换元素"}},[e._v("#")]),e._v(" 可替换元素")]),e._v(" "),i("ul",[i("li",[e._v("浏览器根据元素的标签和属性，来决定元素的具体显示内容,例如浏览器会根据 "),i("code",[e._v("<img>")]),e._v("标签的src属性的值来读取图片信息并显示出来，而如果查看(X)HTML代码，则看不到图片的实际内容；又例如根据 "),i("code",[e._v("<input>")]),e._v(" 标签的type属性来决定是显示输入框，还是单选按钮等")]),e._v(" "),i("li",[e._v("(X)HTML中的"),i("code",[e._v("<img>、<input>、<textarea>、<select>、<object>")]),e._v("都是替换元素。这些元素往往没有实际的内容，即是一个空元素\n如："),i("code",[e._v('<img src="tigger.jpg"/>')]),e._v("、"),i("code",[e._v('<input type="submit" name="Submit" value="提交"/>')])]),e._v(" "),i("li",[i("strong",[e._v("可替换元素的性质同设置了display:inline-block的元素一致")])])]),e._v(" "),i("p",[e._v("总结")]),e._v(" "),i("ul",[i("li",[i("p",[i("img"),e._v("属于可替换元素")])]),e._v(" "),i("li",[i("p",[i("img"),e._v("同时具有行内元素，行内块，和块级元素的特性")])]),e._v(" "),i("li",[i("p",[e._v("替换元素一般有内在尺寸，所以具有 width 和 height，可以设定，例如你不指定 "),i("img"),e._v(" 的 width 和 height 时，就按其内在尺寸显示，也就是图片被保存的时候的宽度和高度")])]),e._v(" "),i("li",[i("p",[e._v("对于表单元素，浏览器也有默认的样式，包括宽度和高度")])]),e._v(" "),i("li",[i("p",[i("code",[e._v("<img>、<input>")]),e._v("属于行内替换元素。height/width/padding/margin均可用。效果等于块元素。")])])]),e._v(" "),i("h3",{attrs:{id:"line-height-1-5和line-height-150-的区别"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#line-height-1-5和line-height-150-的区别"}},[e._v("#")]),e._v(" line-height:1.5和line-height:150%的区别")]),e._v(" "),i("p",[e._v("区别体现在子元素继承时，如下：")]),e._v(" "),i("ul",[i("li",[e._v("父元素设置line-height:1.5会直接继承给子元素，子元素根据自己的font-size再去计算子元素自己的line-height。")]),e._v(" "),i("li",[e._v("父元素设置line-height:150%是计算好了line-height值，然后把这个计算值给子元素继承，子元素继承拿到的就是最终的值了。此时子元素设置font-size就对其line-height无影响了。")])]),e._v(" "),i("p",[e._v("比如父元素设置属性：font- size:14px;line-height:1.5,child设置font-size:26px;")]),e._v(" "),i("p",[e._v("那么父元素：line-height = 14px * 1.5 = 21px，子元素：line-height = 26px * 1.5 = 39px。")]),e._v(" "),i("p",[e._v("父元素设置属性：font-size:14px;line-height:150%,child设置font-size:26px;")]),e._v(" "),i("p",[e._v("那么父元素：line-height = 14px * 150% = 21px，子元素：line-height = 父元素的line-height = 21px。")]),e._v(" "),i("h3",{attrs:{id:"clientheight、offsetheight、scrollheight、offsetto、scrolltop-element-getboundingclientrect"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#clientheight、offsetheight、scrollheight、offsetto、scrolltop-element-getboundingclientrect"}},[e._v("#")]),e._v(" clientHeight、offsetHeight、scrollHeight、offsetTo、scrollTop,"),i("code",[e._v("Element.getBoundingClientRect()")])]),e._v(" "),i("p",[e._v("每个HTML元素都具有clientHeight offsetHeight scrollHeight offsetTop scrollTop 这5个和元素高度、滚动、位置相关的属性，总结出规律如下：")]),e._v(" "),i("p",[e._v("clientHeight和offsetHeight属性和元素的滚动、位置没有关系它代表元素的高度，其中：")]),e._v(" "),i("h4",{attrs:{id:"clientheight"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#clientheight"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight",target:"_blank",rel:"noopener noreferrer"}},[e._v("clientHeight"),i("OutboundLink")],1)]),e._v(" "),i("p",[e._v("包括"),i("code",[e._v("padding")]),e._v("但不包括border、水平滚动条、margin的元素的高度。对于"),i("code",[e._v("display:inline")]),e._v("的元素这个属性一直是0，单位px，只读元素。box-sizing属性设置不会影响。")]),e._v(" "),i("p",[i("code",[e._v("clientHeight")]),e._v(" 可以通过 CSS "),i("code",[e._v("height")]),e._v(" + CSS "),i("code",[e._v("padding")]),e._v(" - 水平滚动条高度 (如果存在)来计算.")]),e._v(" "),i("p",[i("code",[e._v("element.style.height")]),e._v("获取的是内联属性（即： 标签内设置的style）,也就是说如果是在css中设置的，获取不到。通常只用来设置样式。")]),e._v(" "),i("p",[i("code",[e._v("window.getComputedStyle(ele, [伪类])")]),e._v("（返回的是元素所有的样式属性）能获取css height")]),e._v(" "),i("p",[e._v("上面2个返回的都是如"),i("code",[e._v("200px")]),e._v("的字符串css值")]),e._v(" "),i("h4",{attrs:{id:"element-getboundingclientrect"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#element-getboundingclientrect"}},[e._v("#")]),e._v(" "),i("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect",target:"_blank",rel:"noopener noreferrer"}},[e._v("Element.getBoundingClientRect()"),i("OutboundLink")],1)]),e._v(" "),i("p",[e._v("方法返回元素的大小及其相对于视口的位置。")]),e._v(" "),i("p",[e._v("返回值是一个 "),i("code",[e._v("DOMRect")]),e._v(" 对象，这个对象是由该元素的 "),i("code",[e._v("getClientRects()")]),e._v(" 方法返回的一组矩形的集合，就是该元素的 CSS 边框大小。返回的结果是包含完整元素的最小矩形，并且拥有left, top, right, bottom, x, y, width, 和 height这几个以像素为单位的只读属性用于描述整个边框。除了width 和 height 以外的属性是相对于视图窗口的左上角来计算的。-mdn")]),e._v(" "),i("p",[e._v("用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。")]),e._v(" "),i("p",[e._v("top、left和css中的理解很相似，right是指元素右边界距窗口最左边的距离，bottom是指元素下边界距窗口最上面的距离。width、height是元素自身的宽高。")]),e._v(" "),i("p",[i("img",{attrs:{src:r(382),alt:""}})]),e._v(" "),i("p",[e._v("获取到的结果都是Number，不带单位")]),e._v(" "),i("ul",[i("li",[e._v("clientWidth\t获取元素可视部分的宽度，即 CSS 的 width 和 padding 属性值之和，元素边框和滚动条不包括在内，也不包含任何可能的滚动区域")]),e._v(" "),i("li",[e._v("clientHeight\t获取元素可视部分的高度，即 CSS 的 height 和 padding 属性值之和，元素边框和滚动条不包括在内，也不包含任何可能的滚动区域")]),e._v(" "),i("li",[e._v("offsetWidth\t元素在页面中占据的宽度总和，包括 width、padding、border 以及滚动条的宽度")]),e._v(" "),i("li",[e._v("offsetHeight\t元素在页面中占据的高度总和，包括 height、padding、border 以及滚动条的宽度")]),e._v(" "),i("li",[e._v("scrollWidth\t当元素设置了 overflow:scroll 样式属性时，元素的总宽度，也称滚动宽度。在默认状态下，如果该属性值大于 clientWidth 属性值，则元素会显示滚动条，以便能够翻阅被隐藏的区域")]),e._v(" "),i("li",[e._v("scrollHeight\t当元素设置了 overflow:scroll 样式属性时，元素的总高度，也称滚动高度。在默认状态下，如果该属性值大于 clientWidth 属性值，则元素会显示滚动条，以便能够翻阅被隐藏的区域")]),e._v(" "),i("li",[e._v("scrollTop: 代表在有滚动条时，滚动条向下滚动的距离也就是元素顶部被遮住部分的高度。在没有滚动条时scrollTop==0恒成立。单位px，可读可设置。")]),e._v(" "),i("li",[e._v("offsetTop: 当前元素顶部距离最近父元素顶部的距离,和有没有滚动条没有关系。单位px，只读元素。\n"),i("a",{attrs:{href:"https://juejin.cn/post/6844904133921619982",target:"_blank",rel:"noopener noreferrer"}},[e._v("文章"),i("OutboundLink")],1)])]),e._v(" "),i("h3",{attrs:{id:"元素居中"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#元素居中"}},[e._v("#")]),e._v(" 元素居中")]),e._v(" "),i("p",[i("img",{attrs:{src:r(383),alt:""}})])])}),[],!1,null,null,null);t.default=_.exports}}]);